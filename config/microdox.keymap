/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define SYM 1
#define NAV 2
#define FN 3
#define NUM 4

// #define AS(keycode) &ht keycode LS(keycode)

/ {
        behaviors {
            as: auto_shift {
                compatible = "zmk,behavior-hold-tap";
                label = "AUTO_SHIFT";
                #binding-cells = <2>;
                tapping_term_ms = <125>;
                quick_tap_ms = <0>;
                flavor = "tap-preferred";
                bindings = <&kp>, <&kp>;
            };
        };


        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  Q  |  W  |  E  |  R  |  T   |   |  Y  |  U   |  I  |  O  |  P  |
// |  A  |  S  |  D  |  F  |  G   |   |  H  |  J   |  K  |  L  | ENT |
// |  Z  |  X  |  C  |  V  |  B   |   |  N  |  M   |  ,  |  .  |  /  |
//             | CTL | SYM | SPC  |   | SPC | SYM  | SHT |
                        bindings = <
   &as Q LS(Q) &as W LS(W) &as E LS(E) &as R LS(R) &as T LS(T)  &as Y LS(Y) &as U LS(U) &as I LS(I) &as O LS(O) &as P LS(P)
   &as A LS(A) &as S LS(S) &as D LS(D) &as F LS(F) &as G LS(G)  &as H LS(H) &as J LS(J) &as K LS(K) &as L LS(L) &mt RGUI RET
   &as Z LS(Z) &as X LS(X) &as C LS(C) &as V LS(V) &as B LS(B)  &as N LS(N) &as M LS(M) COMMA DOT   FSLH
          &sk LCTRL &sl SYM &lt NAV SPACE &lt NAV SPACE &sl SYM &sk RSHFT
                        >;
                };

                sym_layer {
// -----------------------------------------------------------------------------------------
// |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |
// |     |     |     |     |     |   |  -  |  =  |  {  |  }  | "|" |
// |     |     |     |     |     |   |  _  |  +  |  [  |  ]  |  \  |
//             | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &as N1 LS(N1) &as N2 LS(N2) &as N3 LS(N3) &as N4 LS(N4) &as N5 LS(N5)   &as N6 LS(N6) &as N7 LS(N7) &as N8 LS(N8) &as N9 LS(N9) &as N10 LS(N10)
   &kp GRAVE &kp LPAR &kp RPAR &lt NUM SQT &kp EQUAL   &kp BSLH &lt FN MINUS &kp LBKT &kp RBKT &kp SEMI
   &kp TILDE &kp LT   &kp GT   &kp DQT     &kp PLUS    &kp PIPE &kp UNDER    &kp LBRC &kp RBRC &kp COLN
                     &trans    &trans     &kp BSPC     &kp BSPC   &trans    &trans
                        >;
                };

                nav_layer {
// -----------------------------------------------------------------------------------------
// |BTCLR|     | ESC |  ~   |     |   | TAB | HOME |  UP  | END | DEL  |
// | BT1 | GUI | ALT | CTRL | NUM |   |  /  | LEFT | DOWN | RGT | BKSP |
// | BT2 |     |     |      |     |   |  \  | ENT  |      |     |      |
//             |     |      |     |   |     |      |      |
                        bindings = <
   &kp RG(N1) &kp RG(N2) &kp RG(N3) &kp RG(N4) &kp RG(N5)   &kp HOME  &kp PGUP &kp PGDN  &kp END  &none 
   &none      &none      &kp RG(O)  &kp TAB    &kp ESC      &kp LEFT  &kp DOWN &kp UP   &kp RIGHT     &none
   &none      &none      &none      &kp DEL    &kp CAPS     &kp LA(LEFT)  &none &none   &kp LA(RIGHT) &none
                            &trans   &trans    &trans       &kp BSPC   &trans   &trans
                        >;
                };

                fn_layer {
// -----------------------------------------------------------------------------------------
// |BTCLR|     | ESC |  ~   |     |   | TAB | HOME |  UP  | END | DEL  |
// | BT1 | GUI | ALT | CTRL | NUM |   |  /  | LEFT | DOWN | RGT | BKSP |
// | BT2 |     |     |      |     |   |  \  | ENT  |      |     |      |
//             |     |      |     |   |     |      |      |
                        bindings = <
   &kp F1 &kp F2 &kp F3 &kp F4  &kp F5    &trans  &trans &trans  &trans  &trans 
   &kp F6 &kp F7 &kp F8 &kp F9  &kp F10   &trans  &trans &trans  &trans  &trans 
   &trans &trans &trans &kp F11 &kp F12   &trans  &trans &trans  &trans  &trans 
              &trans   &trans    &trans       &kp BSPC   &trans   &trans
                        >;
                };

                num_layer {
// -----------------------------------------------------------------------------------------
// |BTCLR|     | ESC |  ~   |     |   | TAB | HOME |  UP  | END | DEL  |
// | BT1 | GUI | ALT | CTRL | NUM |   |  /  | LEFT | DOWN | RGT | BKSP |
// | BT2 |     |     |      |     |   |  \  | ENT  |      |     |      |
//             |     |      |     |   |     |      |      |
                        bindings = <
   &trans &trans &trans &trans &trans   &kp KP_MULTIPLY &kp KP_N7 &kp KP_N8 &kp KP_N9 &kp KP_DIVIDE 
   &trans &trans &trans &trans &trans   &kp KP_MINUS    &kp KP_N4 &kp KP_N5 &kp KP_N6 &trans 
   &trans &trans &trans &trans &trans   &kp KP_EQUAL    &kp KP_N1 &kp KP_N2 &kp KP_N3 &kp KP_PLUS 
              &trans   &trans  &trans   &trans   &kp N0   &kp DOT
                        >;
                };
        };
};
